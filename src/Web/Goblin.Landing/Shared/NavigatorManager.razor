@implements IDisposable
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager

@code {
    protected override void OnInitialized()
    {
        // Subscribe to the event
        NavigationManager.LocationChanged += LocationChanged;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            NavigatingEvents();
            
            await JsRuntime.InvokeVoidAsync("triggerEvents").ConfigureAwait(true);
        }
    }

    private void LocationChanged(object sender, LocationChangedEventArgs e)
    {
        var navigationMethod = e.IsNavigationIntercepted ? "HTML" : "Code";
        
#if DEBUG
        Console.WriteLine($"Notified of navigation via {navigationMethod} to {e.Location}");
#endif

        NavigatingEvents();

        JsRuntime.InvokeVoidAsync("triggerEvents").ConfigureAwait(true);
    }

    private void NavigatingEvents()
    {
        // Routing Navigator
        
        var currentPath = NavigationManager.ToBaseRelativePath(NavigationManager.Uri).Trim('?');

        if (!currentPath.EndsWith("-p"))
        {
            return;
        }
        
        var redirectPath = currentPath.Substring(0, currentPath.Length - 2);
        redirectPath = redirectPath.Split("/").LastOrDefault()?.Trim('.');
        redirectPath = "/post/" + redirectPath;
            
        NavigationManager.NavigateTo(redirectPath);
    }
    
    void IDisposable.Dispose()
    {
        NavigationManager.LocationChanged -= LocationChanged;
    }
    
}